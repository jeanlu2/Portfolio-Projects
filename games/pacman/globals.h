#include <stdio.h>
#include <stdbool.h>
#include <conio.h>
#include <time.h>
#include <windows.h>
#include <unistd.h>

// ANSI escape code to move the cursor up
#define MOVE_CURSOR_UP(n) printf("\033[%dA", n);

#define ROWS 26
#define COLS 26
#define STARTING_ROW 20
#define STARTING_COL 12

#define WINNING_SCORE 29000

unsigned int LIVES = 3;
unsigned int SCORE = 0;

enum pacNum {empty, pellet, wall, sidewall, ghost, pacman, vwalls, vvwalls, cash, gameOver};

struct player {
    int x, y;
    int left, right, up, down;
};

struct ghost {
    int x, y;
    bool isOnWall;
    bool outOfBox;
    bool wasOnPellet;
    bool isFrightened;
    int animation;
};

enum pacNum newBoard[ROWS][COLS];

                             //  0  1  2  3  4  5  6  7  8  9  10 11 12 13 14 15 16 17 18 19 20 21 22 23 24 25
enum pacNum pacBoard[ROWS][COLS] = {{6, 6, 6, 6, 6, 6, 6, 6, 6, 6, 6, 6, 0, 6, 6, 6, 6, 6, 6, 6, 6, 6, 6, 6, 6, 6}, //0
                                {2, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 2, 0, 2, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 2}, //1
                                {2, 1, 1, 3, 3, 3, 1, 3, 3, 1, 1, 2, 0, 2, 1, 1, 3, 3, 3, 1, 3, 3, 3, 1, 1, 2}, //2
                                {2, 1, 1, 2, 0, 2, 1, 3, 2, 1, 1, 3, 3, 3, 1, 1, 2, 0, 2, 1, 2, 0, 2, 1, 1, 2}, //3
                                {2, 1, 1, 3, 3, 3, 1, 3, 3, 1, 1, 1, 1, 1, 1, 1, 3, 3, 3, 1, 3, 3, 3, 1, 1, 2}, //4
                                {2, 1, 1, 1, 1, 1, 1, 1, 1, 1, 3, 3, 3, 3, 3, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 2}, //5
                                {2, 1, 1, 1, 1, 3, 3, 3, 1, 1, 2, 0, 0, 0, 2, 1, 1, 1, 3, 3, 3, 1, 1, 1, 1, 2}, //6
                                {2, 1, 1, 1, 1, 2, 0, 2, 1, 1, 3, 2, 0, 2, 3, 1, 1, 1, 2, 0, 2, 1, 1, 1, 1, 2}, //7
                                {3, 3, 3, 3, 1, 2, 0, 2, 1, 1, 1, 3, 3, 3, 1, 1, 1, 3, 3, 0, 2, 1, 3, 3, 3, 3}, //8
                                {0, 0, 0, 2, 1, 2, 0, 2, 1, 1, 1, 1, 1, 1, 1, 1, 1, 2, 0, 0, 2, 1, 2, 0, 0, 0}, //9
                                {0, 0, 0, 2, 1, 2, 3, 3, 1, 1, 3, 3, 0, 3, 3, 1, 1, 3, 3, 0, 2, 1, 2, 0, 0, 0}, //10
                                {3, 3, 3, 3, 1, 2, 2, 1, 1, 1, 2, 0, 0, 0, 2, 1, 1, 1, 2, 0, 2, 1, 3, 3, 3, 3}, //11
                                {1, 1, 1, 1, 1, 3, 3, 1, 1, 1, 2, 0, 0, 0, 2, 1, 1, 1, 3, 3, 3, 1, 1, 1, 1, 1}, //12
                                {3, 3, 3, 3, 1, 1, 1, 1, 1, 1, 2, 0, 0, 0, 2, 1, 1, 1, 1, 1, 1, 1, 3, 3, 3, 3}, //13
                                {0, 0, 0, 2, 1, 3, 3, 3, 1, 1, 3, 3, 3, 3, 3, 1, 1, 1, 3, 3, 3, 1, 2, 0, 0, 0}, //14
                                {0, 0, 0, 2, 1, 2, 0, 2, 1, 1, 1, 1, 8, 1, 1, 1, 1, 1, 2, 0, 2, 1, 2, 0, 0, 0}, //15
                                {3, 3, 3, 3, 1, 2, 0, 2, 1, 3, 3, 3, 3, 3, 3, 3, 1, 1, 2, 0, 2, 1, 3, 3, 3, 3}, //16
                                {2, 1, 1, 1, 1, 2, 0, 2, 1, 2, 0, 0, 0, 0, 0, 2, 1, 1, 2, 0, 2, 1, 1, 1, 1, 2}, //17
                                {2, 1, 1, 1, 1, 3, 3, 3, 1, 3, 3, 2, 0, 2, 3, 3, 1, 1, 3, 3, 3, 1, 1, 1, 1, 2}, //18
                                {2, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 3, 3, 3, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 2}, //19
                                {3, 3, 3, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 3, 3, 3}, //20
                                {0, 0, 2, 1, 3, 3, 3, 1, 1, 3, 3, 3, 3, 3, 3, 3, 1, 1, 3, 3, 3, 3, 1, 2, 0, 0}, //21
                                {3, 3, 3, 1, 2, 0, 2, 1, 1, 2, 0, 0, 0, 0, 0, 2, 1, 1, 2, 0, 0, 2, 1, 3, 3, 3}, //22
                                {2, 1, 1, 1, 3, 3, 3, 1, 1, 3, 3, 3, 3, 3, 3, 3, 1, 1, 3, 3, 3, 3, 1, 1, 1, 2}, //23
                                {2, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 2}, //24
                                {7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7}}; //25

void copyBoard() {
    for (int i = 0; i < ROWS; i++) {
        for (int j = 0; j < COLS; j++) {
            newBoard[i][j] = pacBoard[i][j];
        }
    }
}

void cleanBoard() {
    for (int i = 0; i < ROWS; i++) {
        for (int j = 0; j < COLS; j++) {
            pacBoard[i][j] = newBoard[i][j];
        }
    }
}